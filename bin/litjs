#!/usr/bin/env bash
[ -n "$LITJS_DEBUG" ] && set -x

if [ $# -eq 0 ] || [ ! -f ${!#} ]; then
  echo "Usage: litjs [--watch] [--engine=node|node:harmony|rhino] literate-js-script" 1>&2 && exit 1;
fi

ENGINE='node'
TMPFILE=`mktemp /tmp/litjs.XXXXXX` || exit 1

# monkey-patch console.log() to prepend a counter on each log output
function patch {
  cat > $1 <<EOF
$2_ = $2
$2 = (function() {
  var counter = 1
  return function() {
      var args = '';
      for(var i=0; i < arguments.length; i++) {
        args += 'arguments[' + i + '],';
      }
      eval('$2_.call(this, "\033[1;30m(" + (counter++) + ")\033[0m ", ' + args.replace(/,$/, '') + ')');
  }
})()
EOF
}

function compile {
  # we consider every line with four leading spaces as javascript code (aka markdown)
  echo -e "\033[1;30m $ENGINE engine:\033[0m\n"
  if [ "rhino" = "$ENGINE" ]; then
    patch $TMPFILE "print"
    grep "^    " "$FILE" | grep -v "\[\w*Error\]" | sed 's/^    //' | sed 's/console.log/print/g' >> $TMPFILE
    rhino -f $TMPFILE
  else
    patch $TMPFILE "console.log"
    grep "^    " "$FILE" | grep -v "\[\w*Error\]" | sed 's/^    //' >> $TMPFILE
    if [ "node:harmony" = "$ENGINE" ]; then
      node --harmony $TMPFILE
    else
      node $TMPFILE
    fi
  fi
}

function sha {
  echo `ls -lR | md5`
}
old_sha=$(sha)

function watch {
  while true; do
    if [[ $(sha) != $old_sha ]]; then
      clear
      compile
      old_sha=$(sha)
    fi
    sleep 1
  done
}

while test $# -ne 0; do
  arg=$1
  shift
  case $arg in
    -w|--watch)
      WATCH=true
      ;;
    -e|--engine)
      ENGINE=$1
      shift
      ;;
    *)
      FILE=$arg
      ;;
  esac
done

if [ $WATCH ]; then
  trap exit SIGINT
  clear
  compile
  watch
else
  compile
fi
